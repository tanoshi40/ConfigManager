using System;
using ConfigManager.Generator.CodeSyntax;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace ConfigManager.Generator.Helper;

internal static partial class GeneratorHelper
{
    internal static string GetHelperAssemblyVersion() => typeof(GeneratorHelper).GetAssemblyVersion();

    internal const string NewLine = @"
";

    internal static string GetGeneratedAttribute(string genName, string genVersion) =>
        $@"[global::System.CodeDom.Compiler.GeneratedCodeAttribute(tool:""{genName}"", version:""{genVersion}"")]";

    internal static string GetAssemblyVersion(this Type type) => type.Assembly.GetName().Version?.ToString() ?? "n/a";
    internal static string ToLowerString(this bool @bool) => @bool.ToString().ToLower();

    internal static string AsCodeContext(AttributeSyntax codeGenAttribute, string @namespace,
        params CodeSyntaxDefinitions.MemberType[] members)
    {
        MemberDeclarationSyntax[] membersSyntax = new MemberDeclarationSyntax[members.Length];
        for (int i = 0; i < members.Length; i++)
        {
            membersSyntax[i] = members[i].AsMember(codeGenAttribute);
        }

        CompilationUnitSyntax code = CompilationUnit()
            .WithMembers(
                SingletonList<MemberDeclarationSyntax>(
                    NamespaceDeclaration(IdentifierName(@namespace))
                        .WithMembers(List(membersSyntax))))
            .NormalizeWhitespace();

        return $"""
                // <auto-generated>
                #nullable enable
                {code}
                """;
    }

    internal static string AsCodeContext(this CodeSyntaxDefinitions.MemberType members,
        AttributeSyntax codeGenAttribute, string @namespace) => AsCodeContext(codeGenAttribute, @namespace, members);

    internal static AttributeSyntax BuildGeneratorAttribute(string generatorName, string generatorVersion) =>
        Attribute(
                QualifiedName(QualifiedName(QualifiedName(AliasQualifiedName(IdentifierName(
                            Token(SyntaxKind.GlobalKeyword)),
                        IdentifierName("System")), IdentifierName("CodeDom")), IdentifierName("Compiler")),
                    IdentifierName("GeneratedCodeAttribute")))
            .WithArgumentList(
                AttributeArgumentList(
                    SeparatedList<AttributeArgumentSyntax>(
                        new SyntaxNodeOrToken[]
                        {
                            AttributeArgument(LiteralExpression(
                                    SyntaxKind.StringLiteralExpression, Literal(generatorName)))
                                .WithNameColon(NameColon(IdentifierName("tool"))),
                            Token(SyntaxKind.CommaToken), AttributeArgument(
                                    LiteralExpression(
                                        SyntaxKind.StringLiteralExpression, Literal(generatorVersion)))
                                .WithNameColon(NameColon(IdentifierName("version")))
                        })));

    internal static AttributeListSyntax Singelton(this AttributeSyntax attribute) =>
        AttributeList(SingletonSeparatedList(attribute));
}
