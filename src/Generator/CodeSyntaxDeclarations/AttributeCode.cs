using System;
using System.Linq;

namespace ConfigManager.Generator.CodeSyntaxDeclarations;

internal class DefinedAttributeCode : AttributeCode
{
    public string Namespace { get; set; }
    public string GenAttribute { get; set; }
    public CodeSyntaxDefinitions.Property[] Properties { get; set; }
    public AttributeTargets[] Targets { get; set; }
    public string AttributeAccessModifier { get; set; }
    public string ConstructorAccessModifier { get; set; }
    public bool AllowMultiple { get; set; }

    public DefinedAttributeCode(string name, string @namespace, string genAttribute, CodeSyntaxDefinitions.Property[] properties,
        AttributeTargets[] targets, string attributeAccessModifier = "internal",
        string constructorAccessModifier = "internal", bool allowMultiple = false) : base(name)
    {
        Namespace = @namespace;
        GenAttribute = genAttribute;
        Properties = properties;
        Targets = targets;
        AttributeAccessModifier = attributeAccessModifier;
        ConstructorAccessModifier = constructorAccessModifier;
        AllowMultiple = allowMultiple;
    }

    public override string Code
    {
        get
        {
            string targets =
                Targets.Length == 0
                    ? AttributeTargets.All.GetFullQualifiedName()
                    : string.Join(" | ",
                        Targets.Select(target => target.GetFullQualifiedName()));
            string usages =
                $"[global::System.AttributeUsage({targets}, AllowMultiple = {AllowMultiple.ToLowerString()}, Inherited = false)]";

//             string content = Properties.Length == 0
//                 ? "{}"
//                 : $$"""
//                 {
//                         {{string.Join(GeneratorHelper.NewLine,
//                             Properties.Select(prop => prop.GetCode(null)))}}
//                         public {{FullName}}({{string.Join(", ", Properties.Select(prop => $"{prop.FullyQualifiedType} {prop.AlternativeName}"))}}) {
//                             {{string.Join(GeneratorHelper.NewLine, Properties.Select(prop => $"this.{prop.Name} = {prop.AlternativeName};"))}}
//                         }
//                     }
//                 """;

            string code =
                $$"""
            // <auto-generated>
            #nullable enable
            namespace {{Namespace}}
            {
                {{GenAttribute}}
                {{usages}}
                {{AttributeAccessModifier}} sealed class {{FullName}} : global::System.Attribute
                {{"content"}}
            }
            """;

            return code;
        }
    }
}

internal class CustomAttributeCode : AttributeCode
{
    public CustomAttributeCode(string name, string code) : base(name) => Code = code;

    public override string Code { get; }
}

public abstract class AttributeCode
{
    protected AttributeCode(string name) => Name = name;

    public string Name { get; }
    public string FullName => $"{Name}Attribute";

    public abstract string Code { get; }
    public string FileName => $"Generated.{FullName}.g.cs";
}
